#+ATTR_LATEX: :environment cn-article
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [UTF8,a4paper]
#+LATEX_HEADER: \usepackage[BoldFont,SlantFont,CJKsetspaces,CJKchecksingle]{xeCJK}
#+LATEX_HEADER: \XeTeXlinebreaklocale "zh"
#+LATEX_HEADER: \XeTeXlinebreakskip = 0pt plus 1pt
#+LATEX_HEADER: \setmainfont[Mapping=tex-text]{Times New Roman}
#+LATEX_HEADER: \setsansfont[Mapping=tex-text]{Arial}
#+LATEX_HEADER: \setmonofont{Courier New}
#+LATEX_HEADER: \setCJKmainfont{SimSun}
#+LATEX_HEADER: \setCJKmonofont{MingLiU}
#+LATEX_HEADER: \usepackage{listings}

#+LATEX_HEADER: \tolerance=1000
#+LATEX_HEADER: \date{\today}
#+LATEX_HEADER: \title{Org导出中文PDF}
#+OPTIONS: \n:t
ams666.com amsdizhi.com
Key Pair 1
key1: 99B120EF-B927-4227-940C-F72EB27F26AD
key2: 346F6F5877E4BB4F39D44A29B28CCF5B467C5D35F00B988B06546CA2127299B9C124AE847E64BA9320E9EEA5D9F275A28280E68F83AC3DEBA99DEFAC86054152A9C82CD6F39597657CB63D204CB251416E565A269362F278CF84A8D4FFC173325B6FE4AB6ABEC1BF8F22104E444E1E3BE5777F5875AC7D9F966ECE637756A6AA

* git
** git避免输入用户名密码
HOME目录下创建.git-credentials

内容是 https://name:pwd@github.com

然后进入shell

git config --global credential.helper store

查看.gitconfig文件，会多了一项：

[credential]

    helper = store
    
** git的PATH设置
安装官方git，选路径时选第2个，即把git/cmd/添加到PATH中，这样就可以使用git命令
又不会引起其他命令的混乱

** git push 前要先打开pageant并加载指定ppk文件，对于SSH下载下来的文件这样才能push成功

** git修改已经push过的commit message <2019-02-14 周四 12:22>
1、git rebase -i HEAD~20 编辑最近20个commit 
2、在弹出的编辑页面，将 *要修改的错误* 的commit message前面的“pick”改为“reword”，然后保存 C-x #
   注意：如果启用了magit，会弹出magit的rebase，这个buffer不能编辑，reword要执行"r"命令
3、保存后会再弹出一个编辑页面，将里面错误的commit message改为想要的，然后保存 
4、git push --force
以下方法才好用
通过git rebase修改commit message
今天发现一个项目的git commit message中的单词拼错了，需要修改一下。但这样简单的修改，需要通过git rebase才能完成。

首先要git rebase到需要修改message的那个commit的前1个commit。假设commit id是32e0a87f，运行下面的git rebase命令：

git rebase -i 32e0a87f
在git bash中运行上面的命令后，会弹出编辑框，在编辑框中会分行依次显示以pick开头的这个commit之后的所有commit message。

将需要修改的commit message之前的"pick"改为"reword"，点击保存按钮，并关闭编辑框，这时会执行rebase操作。

Rebasing (1/3)
接着会再次弹出编辑框，这次编辑框中只有之前改为"reword"的那个commit message，此时修改commit message的内容，点击保存按钮并关闭编辑框，会继续执行rebase操作。

如果操作成功，会出现如下的提示：

[detached HEAD aa3b52c] Add return url
 2 files changed, 1 insertion(+), 3 deletions(-)
Successfully rebased and updated refs/heads/oss.
这样就完成了git commit message的修改，然后强制push一下就搞定了。

git push --force

*** rebase其他功能的含义 <2020-02-06 周四 21:16>
选择pick操作，git会应用这个补丁，以同样的提交信息（commit message）保存提交

选择reword操作，git会应用这个补丁，但需要重新编辑提交信息

选择edit操作，git会应用这个补丁，但会因为amending而终止

选择squash操作，git会应用这个补丁，但会与之前的提交合并

选择fixup操作，git会应用这个补丁，但会丢掉提交日志

比如合并squash的使用，要把时间最早的commit pick，然后下面的都标记为squash，然后合并时需要改一下log，最后git push origin
master --force提交，切记不要先pull再push

** magit里解决完文件冲突后要stage一下，才能resolve <2019-02-14 周四 16:28>

** 设置fork url <2019-03-07 周四 13:25>
git remote set-url fork URL

** git proxy密码特殊字符转义，比如.gitconfig里就要用 <2019-03-19 周二 19:10>
 ! --> %21    # --> %23    $ --> %24    & --> %26    ' --> %27
 ( --> %28    ) --> %29    * --> %2A    + --> %2B    , --> %2C
 / --> %2F    : --> %3A    ; --> %3B    = --> %3D    ? --> %3F
 @ --> %40    [ --> %5B    ] --> %5D

** 下载报SSL错误，需要改配置 <2019-10-15 周二 14:12>
g00280886@DESKTOP-4QTA7QT MINGW64 /g
$ git clone https://github.com/llvm/llvm-project.git
正克隆到 'llvm-project'...
fatal: 无法访问 'https://github.com/llvm/llvm-project.git/'：SSL certificate problem: unable to get local issuer certificate

g00280886@DESKTOP-4QTA7QT MINGW64 /g
$ git config --global http.sslVerify false

* 其他
** pscp problem when called from bash 

Hi,
using pscp from "cmd" in Windows woks well but when it is used from bash, host:path is not correctly interpreted, it needs to add an additional / before the path to be well interpreted.
For example:
pscp -v myFile mylogin@myHost:/tmp/myDir
gives messages
Looking up host "myHost;C"
ssh_init: Host does not exist

pscp -v myFile mylogin@myHost://tmp/myDir
works well (with message
Looking up host "myHost")

** psftp get 和 put时local dir就是起psftp命令时的目录
可以用lpwd显示，也可以用lcd \path\to\new\dir修改

** win7拒绝访问sendto文件夹
在我的电脑的地址栏输入
#+BEGIN_EXAMPLE
shell:sendto
#+END_EXAMPLE
即可

** True (False) Positives (Negatives) 相关概念 <2019-05-23 周四 19:37>
https://blog.csdn.net/OpenSourceSDR/article/details/73334302
TP —— True Positive （真正, TP）是指某（些）个正样本被预测判定为正；此种情况可以称作判断为真的正确情况【correctly identified】

TN —— True Negative（真负 , TN）是指某（些）个负样本被预测判定为负；此种情况可以称作判断为假的正确情况【correctly rejected】

FP ——False Positive （假正, FP）是指某（些）个负样本被模型预测为正；此种情况可以称作判断为真的错误情况，或称为误报【incorrectly identified】

FN——False Negative（假负 , FN）是指某（些）个正样本被模型预测为负；此种情况可以称作判断为假的错误情况，或称为漏报【incorrectly rejected】

** 访问远程主机的D盘 <2019-07-17 周三 20:31>
\\100.95.225.233\d$\gzj

** 刷新 DNS解析缓存 <2020-02-15 周六 20:57>
windows: ipconfig /flushdns
* emacs
** srecode编辑模式C-c c-c是确认修改生效
** dired中S即dired-do-symlink可以给exe创建快捷方式（symlink or soft link），并放到指定位置。
** 插件修改

*** CEDET的修改：
  
**** 1 修改cedet-global.el，添加
 		      ((eq texttype 'regexp)
 		      "g")
+              ((eq texttype 'symbolname)
+               "s")
**** 2 在ect/srecode中修改c.srt和doc-cpp.srt
**** 3 到.emacs.d下把srecode-map.el删除
**** 4 list.el 中semantic-symref-produce-list-on-results
(semantic-symref-result-get-tags res nil)
这个是控制要不要把symref的文件都打开(原来是传t，改为nil)
**** 5 symref会过滤.h中的项是semantic-symref-result-get-tags中做的,对该函数做如下修改（详细见symbre.el）

		   ;; 找不到tag时，使用which-fuction匹配本文件所有tag来查找
#+BEGIN_SRC emacs-lisp
(unless tag
			 (let ((foundFlag-p nil )
				   (i 0))

			   (while (and
					   (not foundFlag-p)
					   (<= i (length tagList)))

				 ;; if found, set foundFlag-p
				 
				 (when (equal (semantic-tag-name (elt tagList i)) whichFunc)
				   (setq foundFlag-p t )
				   (setq tag (elt tagList i)))

				 (setq i (1+ i))))
			   )
#+END_SRC
		   

**** 6 symref把行号加上
修改semantic-symref-rb-toggle-expand-tag
#+BEGIN_SRC emacs-lisp
	    (insert-button (format "[%s] %s" (car hits) (car text))
#+END_SRC



**** 7 symref 重命名时对于semantic-symref-anything不好使，要修改list.el
在semantic-symref-list-map-open-hits中修改
	      (while (re-search-forward oldsym (point-at-eol) t)

**** 8 修改semantic-symref-anything 注释会被过滤的问题
  ;; 再找不到就创建一个空tag
			   (unless tag
				 (setq tag (semantic-tag "/* COMMENT */" 'variable))
				 (semantic--tag-put-property tag :filename (buffer-file-name)))


*** helm-files.el的修改
;; (require 'dired-x)

*** nlinum.el的修改
(defun nlinum--setup-window ()
  (let ((width (if (display-graphic-p)
                   (ceiling
                    (let ((width (nlinum--face-width 'linum)))
                      (if width
                          (/ (* nlinum--width 1.0 width)
                             (frame-char-width))
                        (/ (* nlinum--width 1.0
                              (nlinum--face-height 'linum))
                           (frame-char-height)))))
                 nlinum--width)))
    (set-window-margins nil (if nlinum-mode (if (< nlinum--width width)
												width
											  nlinum--width))
                        (cdr (window-margins)))))

*** comment-box功能
给代码加上块注释

*** <M-home>和<M-end>可以将其他窗口的光标移到开始或结尾

** dynamic-library-alist显示依赖的dll
** buffer中插入变量值
#+BEGIN_SRC emacs-lisp
 (insert (format "[%s] " (car hits)))
#+END_SRC
** 查看diff时，apply hunk可以把变更给取消
** 搭建emacs编译环境时
把C:/MinGW/msys/1.0/etc下的fstab.sample改名为fstab
XPM源码中的simx.h和xpm.h复制到 C:/MinGW/include/X11 下
** How to Undo the Unpushed Commits in Magit?
In Magit buffer *magit: ..*,

Hit x
Select origin/master
Above action will undo all the commits that haven’t been pushed to github.com. It will still preserve the modified states of the yet-to-be staged/committed files.

** magit部分提交修改
用tab展开修改，假如有多个hunk，在要提交的hunk上stage（s键），如果失败可能是无法单独提交该hunk

** 安装pygments
先安装python 2.7 或 3.4
再打开cmd 切换到pygments根目录执行c:\python34\python.exe setup.py install即可，有可能得先下载setuptools
确认版本
C:\Users\g00280886>C:\Python34\Scripts\pygmentize.exe -V
Pygments version 2.1, (c) 2006-2015 by Georg Brandl.

** .dir-locals.el具体实现有关函数hack-dir-local-variables
** c-forward-conditional是#if #end之间移动，不能带else，c-up-conditional是不同深度的#之间内外移动，可以带else
** sdcv词典放的位置 ~\.stardict\dic
** cscope处理不了文件中有extern c
** 编译rtags要在cygwin中装cmake openssl-dev libclang-static ncurse make.
** cygwin中装libglib是给sdcv用的
libglib-2.0.dll.a 要装32位版本的cygwin
** m-q 自动换行的用法
先设置(setq-default fill-column 80)，或者用快捷键c-x f，然后选中一段文字m-q
** ycmd编译
系统需求：CMAKE PYTHON34或27
下载ycmd和third-party(这个目录在运行ycmd后会有python lib的cache，比如python3的，如果直接拷贝使用的话，比如ycm_core.pyd是python2编译出来的，就会报错：Ycmd error: ycm_core library compiled for Python 2 but loaded in Python 3.)
在ycmd下新建目录ycmd-build，进去后起命令行cmake -G "Visual Studio 14" -DPATH_TO_LLVM_ROOT="C:/Program Files (x86)/LLVM" -DUSE_PYTHON2=OFF . ../cpp，成功后会生成一个VS的工程，用VS打开后编译 ycm_core ，成功后会在ycmd根目录下生成 ycm_core.pyd 和 libclang.dll ，这样emacs-ycmd就能用了
如果有c++ runtime error 把C:\Program Files\CMake\bin下的msvcp120.dll和msvcr120.dll改名(C:\Program Files\ImageMagick-6.9.1-Q16下还有一份)，保证全局只有一份
** 直接打开图片显示二进制
把dynamic-library-alist中指定的dll拷贝到emacs/bin目录下
** org-mode
*** org-mode如何显示图片	
把图片放到org文件所在目录下
在org文件中填写文件名
并打开iimage-mode
c-l刷新即可
*** org-mode中使用截图												 
安装imagemagick，并勾选convert
通过org-download插件截图，配置org-download截图方法为imagemagick/convert
先用其他截图工具把截图保存到剪贴板后，用org-download-screenshot功能把截图放到org文件中

*** org-mode导出html后换行变空格的解决办法
在org文件开头加
#+BEGIN_SRC
#+OPTIONS: \n:t
#+END_SRC
*** org checklist示例
m-s-ret复制 1. [ ] xxx新建 c-c c-c完成
1) [-] abc [50%] 中括号里先写个% 或者 / 即可
   - [-] ddd [2/3]
     1) [ ] dasf
     2) [X] llll
     3) [X] asdfasd
   - [X] a;ll
2) [X] cde


1. [ ] t1
2. [X] t2

注意每个标题不只是可以写一行内容，标题下面的内容要有缩进不能顶头写才行
*** org 导出pdf
(1) CTeX版本: 下载地址http://www.ctex.org/CTeXDownload, 下载Full包

(2) 修改导出命令 (setq org-latex-pdf-process (quote ("xelatex -interaction nonstopmode -output-directory %o %f" "xelatex -interaction nonstopmode -output-directory %o %f" "xelatex -interaction nonstopmode -output-directory %o %f")))

(3) org文件头增加设置
#+BEGIN_SRC latex
  #+ATTR_LATEX: :environment cn-article
  #+LATEX_CLASS: article
  #+LATEX_CLASS_OPTIONS: [UTF8,a4paper]
  #+LATEX_HEADER: \usepackage[BoldFont,SlantFont,CJKsetspaces,CJKchecksingle]{xeCJK}
  #+LATEX_HEADER: \XeTeXlinebreaklocale "zh"
  #+LATEX_HEADER: \XeTeXlinebreakskip = 0pt plus 1pt
  #+LATEX_HEADER: \setmainfont[Mapping=tex-text]{Times New Roman}
  #+LATEX_HEADER: \setsansfont[Mapping=tex-text]{Arial}
  #+LATEX_HEADER: \setmonofont{Courier New}
  #+LATEX_HEADER: \setCJKmainfont{SimSun}
  #+LATEX_HEADER: \setCJKmonofont{MingLiU}
  #+LATEX_HEADER: \usepackage{listings}

  #+LATEX_HEADER: \tolerance=1000
  #+LATEX_HEADER: \date{\today}
  #+LATEX_HEADER: \title{Org导出中文PDF}
#+END_SRC

(4) org文件保存成utf-8
(5) org-download-image-dir用默认设置，也就是图片要保存到org文件当前目录下，否则导出pdf会失败
(6) setCJKmainfont{SimSun} 这个是字体要注意必须是系统存在的字体
PDF导出不好用，用HTML导出后粘贴到word里或者转换成pdf
***  <2019-12-27 周五 14:46>
*** org中输入代码段
快捷键 <s TAB
s	#+BEGIN_SRC ... #+END_SRC 
e	#+BEGIN_EXAMPLE ... #+END_EXAMPLE
q	#+BEGIN_QUOTE ... #+END_QUOTE 
v	#+BEGIN_VERSE ... #+END_VERSE 
c	#+BEGIN_CENTER ... #+END_CENTER 
l	#+BEGIN_LaTeX ... #+END_LaTeX 
L	#+LaTeX: 
h	#+BEGIN_HTML ... #+END_HTML 
H	#+HTML: 
a	#+BEGIN_ASCII ... #+END_ASCII 
A	#+ASCII: 
i	#+INDEX: line 
I	#+INCLUDE: line 

示例：
#+BEGIN_SRC c
  GPATH_PARM_ASSERT_RET_VAL((NULL != pstTopoGroup->pstPaths), GPATH_ERR);
  GPATH_PARM_ASSERT_RET_VAL((NULL != pThis), GPATH_ERR);

  GPATH_DBG_PRINT("[CALCI]: proc single topo_group, calcId[%u], batchId[%u], seq[%u], "
      "path_num[%u], deadlock[0x%x]",
      pstLspResult->uiCalcId,
      uiBatchId,
      ,*puiSeqNum,
      pstTopoGroup->ulPathNum,
      pstTopoGroup->bIsDeadLock);
#+END_SRC

<q TAB是输入一段引用

相关变量org-structure-template-alist 方法 org-insert-structure-template（27才有的命令）

注意这个功能在27以后变成使用C-c C-,来触发org-insert-structure-template

*** helm列出所有标题命令 <2019-03-29 周五 15:39>
helm-org-in-buffer-headings

*** 加粗，斜体，下划线，行内代码，删除线 <2019-05-31 周五 14:23>
*加粗* /斜体/ _下划线_ =code= ~code~

+删除线+

分别对应 
(* / _ = ~ +)


*** 将标题作为链接插入到内容中的方法 <2019-10-23 周三 22:53>
先在目录标题处执行org-store-link，然后在要插入链接的位置执行org-insert-link，在提示中会出现刚才保存的标题作为链接可以插入了

*** 刚打开一个org文件可以先跳到最后一行m->，然后tab键展开 <2020-03-09 周一 10:29>

** 指定某目录下的.h文件都按c++ mode显示
目录下创建.dir-locals.el，内容：
((c-mode . ((mode . c++))))

** cquery补丁include时
要#include "或者#include < 然后输入要补全的文件名才会出补全，注意只有单边符号

** 用外部程序打开
用helm-find-file打开当前目录后找到要打开的文件，按C-c X使用默认的外部程序打开，emacs本身的!或者&在26.1不好用了

** 要获取Visual studio的环境变量包含路径
执行cquery编译路径下的./waf configure,然后看build目录下生成的conf.log中的INCLUDE

** makefile类文件里去定义某个宏用-U

** ccls编译
on windows
安装msys64 运行 minwg64 先更新库pacman -Syu 需要关闭再打开 pacman -Su ，另外添加国内的源，详见[[*emax及msys2环境的使用 <2019-02-14 周四 19:42>][emax及msys2环境的使用 <2019-02-14 周四 19:42>]]
pacman -S mingw-w64-x86_64-clang mingw-w64-x86_64-clang-tools-extra mingw64/mingw-w64-x86_64-polly mingw-w64-x86_64-cmake mingw-w64-x86_64-jq mingw-w64-x86_64-ninja mingw-w64-x86_64-ncurses
pacman -S git
git clone --depth=1 --recursive https://github.com/MaskRay/ccls
mkdir build
cd build
cmake .. -G Ninja  -DSYSTEM_CLANG=ON -DCMAKE_CXX_FLAGS=-D__STDC_FORMAT_MACROS -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
cmake --build  .

如果有z3的错误
#+BEGIN_QUOTE
ninja: error: '/mingw64/lib/libz3.dll.a', needed by 'ccls.exe', missing and no known rule to make it
#+END_QUOTE

#+BEGIN_QUOTE
Open "./Release/build.ninja", search for "libz3", you would find two occurrences.

Change "/lib/libz3.dll.a" to an absolute path, then the ninja -C Release works.
G$:/msys64/mingw64/lib/libz3.dll.a
#+END_QUOTE

PS. msys64的代理设置g:\msys64\home\g00280886\.bashrc中添加
export http_proxy=http://user:pwd@url:port
export https_proxy=http://user:pwd@url:port
*** 使用VS2017编译
安装步骤
第一步：安装VS2017最新版，安装时勾选上CMake

第二步：编译clang

打开 适用于VS2017的x64本机工具命令提示这个cmd

// 下载源码
git clone https://mirrors.tuna.tsinghua.edu.cn/git/llvm/llvm.git
git clone https://mirrors.tuna.tsinghua.edu.cn/git/llvm/clang.git llvm/tools/clang
// 进入目录
cd llvm

// 生成
cmake -H. -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DLLVM_TARGETS_TO_BUILD=X86 -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl
// 编译
ninja -C Release clangFormat clangFrontendTool clangIndex clangTooling clang clang-cl (加上 -j 1 减少并行任务数量避免卡死 ,用-j1這樣會很慢，可以嘗試 -DLLVM_PARALLEL_LINK_JOBS=1)
第三步：编译ccls

// 下载代码
git clone  --recursive https://github.com/MaskRay/ccls
// 生成
cd ccls
cmake -H. -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang-cl -DSYSTEM_CLANG=On -DCMAKE_PREFIX_PATH="g:/llvm/Release;g:/llvm/Release/tools/clang;g:/llvm;g:/llvm/tools/clang"
// 构建
ninja -C Release
-DCMAKE_PREFIX_PATH 对照自己的路径修改。
*** 使用2019编译 <2019-10-24 周四 00:41>
以下命令都要在x64 Native Tools Command Prompt for VS 2019里面敲，这是装VS2019带的命令行
1. 先编译llvm+clang，得编译不带z3的不然ccls没法编译
参考 https://github.com/ziglang/zig/wiki/How-to-build-LLVM%2C-libclang%2C-and-liblld-from-source
下载代码
git clone https://mirrors.tuna.tsinghua.edu.cn/git/llvm/llvm.git
git clone https://mirrors.tuna.tsinghua.edu.cn/git/llvm/clang.git llvm/tools/clang
到llvm的目录下 
mkdir build
cd build

"c:\Program Files\CMake\bin\cmake.exe" .. -Thost=x64 -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX=d:\llvm+clang-9.0.0-win64-msvc-release -DCMAKE_PREFIX_PATH=d:\llvm+clang-9.0.0-win64-msvc-release -DCMAKE_BUILD_TYPE=Release -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD="AVR" -DLLVM_ENABLE_LIBXML2=OFF -DLLVM_USE_CRT_RELEASE=MT -DLLVM_WITH_Z3=off

msbuild /m -p:Configuration=Release INSTALL.vcxproj

-m:6 并行任务的个数 

PS G:\llvm8-rc2\llvm-project-llvmorg-8.0.0-rc2\llvm\build> msbuild .\ALL_BUILD.vcxproj -m:6 -p:Configuration=RelWithDebInfo

解压cfe-9.0.0.src.tar.xz会报权限错误，这里需要以管理员身份运行7z程序再解压 
再到clang目录下
mkdir build
cd build
"c:\Program Files\CMake\bin\cmake.exe" .. -Thost=x64 -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX=d:\llvm+clang-9.0.0-win64-msvc-release -DCMAKE_PREFIX_PATH=d:\llvm+clang-9.0.0-win64-msvc-release -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_CRT_RELEASE=MT -DLLVM_WITH_Z3=off

msbuild /m -p:Configuration=Release INSTALL.vcxproj

/maxcpucount:3 并发进程数
如果出现编译器堆空间不足的报错，就重新开一个vs的命令窗口，另外python用的是2.7编成功的

2. 然后以d:\llvm+clang-9.0.0-win64-msvc-release为lib编译ccls
参考 https://zh4ui.net/post/2019-01-28-build-ccls-on-window10/
准备工作：先安装msys2，并在msys2里安装pacman -S mingw-w64-x86_64-jq mingw-w64-x86_64-ncurses，然后windows安装cmake和ninja确保在PATH中
然后在x64 Native Tools Command Prompt for VS 2019执行以下命令
cd ccls
mkdir build
cd build
cmake ..  -DCMAKE_BUILD_TYPE=Release -DSYSTEM_CLANG=ON -DCMAKE_CXX_STANDARD=17  -G "Ninja" -DCMAKE_CXX_FLAGS=-D__STDC_FORMAT_MACROS -DCMAKE_PREFIX_PATH="d:/llvm+clang-9.0.0-win64-msvc-release/;C:/msys64/mingw64/"  -DCMAKE_CXX_COMPILER="d:/llvm+clang-9.0.0-win64-msvc-release/bin/clang-cl.exe"
cmake --build .


如果出现error: expected ‘)’ before ‘PRIu64’的错误，则需要使用CMake选项 -DCMAKE_CXX_FLAGS=-D__STDC_FORMAT_MACROS
*** 纯VS2019编译 <2019-10-24 周四 18:27>
1. 编译llvm+clang
参考https://cxuesong.com/archives/1056
1.1  准备CMAKE和VS2019，然后llvm和clang按llvm 和 llvm/tools/clang放好
在“x64 Native Tools Command Prompt for VS 2019”命令行工具中执行cmake-gui
指定llvm的路径以及llvm/build作为build路径
1.2 点configure,添加host=x64 in the -T arguments然后点finish,
然后LLVM_TARGETS_TO_BUILD填X86注意是大写的，还有CMAKE_INSTALL_PREFIX指定一个安装路径，要有写入权限的，不然最后编译INSTALL工程会报错（默认的C盘路径就报错）。
1.3 点Generate生成sln，点Open Project用VS2019打开sln，在ALL_BUILD工程上右键点生成，注意先把VS工具栏里的Debug改为Release。
1.4 生成完后在INSTALL工程上右键点生成，所以的文件就安装到指定目录了
2. 编译ccls
参考https://cxuesong.com/archives/1067
2.1 在“x64 Native Tools Command Prompt for VS 2019”命令行工具中执行cmake-gui
指定ccls的根路径以及ccls/build作为build路径
“Add Entry” and specify your LLVM path in CMAKE_PREFIX_PATH
然后点击configure
2.2 点Generate生成sln，点Open Project后，切到Release，在ALL_BUILD工程上右键点生成，这时ccls.exe已经生成了，不必再生成INSTALL
编译出来的ccls.exe需要依赖VC的库才能运行，
https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads
或者命令行 PS G:\llvm8-rc2\llvm-project-llvmorg-8.0.0-rc2\llvm\build> msbuild .\ALL_BUILD.vcxproj -m:6 -p:Configuration=MinSizeRel
** lsp-java <2019-01-15 周二 11:19>
要在C:\Users\g00280886\.m2目录下放私服的settings.xml

** gradle proxy <2019-03-18 周一 14:30>
There are 2 ways for using Gradle behind a proxy :

Add arguments in command line
(From Guillaume Berche's post)

Add these arguments in your gradle command :

-Dhttp.proxyHost=your_proxy_http_host -Dhttp.proxyPort=your_proxy_http_port
or these arguments if you are using https :

-Dhttps.proxyHost=your_proxy_https_host -Dhttps.proxyPort=your_proxy_https_port
Add lines in gradle configuration file
in gradle.properties add the following lines :

systemProp.http.proxyHost=your_proxy_http_host
systemProp.http.proxyPort=your_proxy_http_port
systemProp.https.proxyHost=your_proxy_https_host
systemProp.https.proxyPort=your_proxy_https_port
(for gradle.properties file location, please refer to official documentation https://docs.gradle.org/current/userguide/build_environment.html
** all-the-icons装上后还有乱码？ <2019-01-17 周四 17:06>

** .bashrc不能放到C:\Users\工号，会影响 git bash <2019-01-18 周五 14:38>

** lsp-java <2019-01-21 周一 13:08>

***  <2019-01-24 周四 10:51>要用maven的编译命令先编译mvn clean install -Dmaven.test.skip=true -Dcheckstyle.skip=true后，才能正常跳转，否则有些import不正常

*** 有时候增量的索引更新不准确时，手动执行c-u lsp-java-build-project全量更新 <2019-01-24 周四 10:51>

** TODO 待解决或者研究的功能或插件 <2019-01-22 周二 16:56>

*** TODO 分窗口情况下，tabbar中会多出类似"helm gtags"的标签 <2019-01-22 周二 16:56>
改用ivy
*** TODO lsp-java无法跳转到local_repo中的符号 <2019-01-24 周四 11:34>
研究一下lsp-java的args
*** TODO yasnippets在.后面不应该出现 <2019-01-28 周一 09:50>

*** TODO git-for-emacs的使用有问题，导致在emacs里很慢 <2019-01-28 周一 14:24>

*** TODO 看org-plus-contrib都有啥功能 <2019-02-14 周四 19:42>

*** TODO pdf-tools <2019-02-14 周四 19:42>

*** TODO emax及msys2环境的使用 <2019-02-14 周四 19:42>
1. msys2的GIT有问题，Git用Windows版的，在/etc/pacman.conf加入如下内容安装这个版本的Git------经验证不好用
[git-for-windows]
# SigLevel = Optional TrustedOnly
SigLevel = Never
Server = https://dl.bintray.com/git-for-windows/pacman/$arch
2. 可以用清华或者中科大的源加速MSYS2的使用。具体改两个地方就行：
# /etc/pacman.d/mirrorlist.mingw64
Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64/
Server = http://mirrors.ustc.edu.cn/msys2/mingw/x86_64/

# /etc/pacman.d/mirrorlist.msys
Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/$arch/
Server = http://mirrors.ustc.edu.cn/msys2/msys/$arch/
3. emax64打开后可能mode-line无法正常显示图标，这时需要把libXpm-nox4.dll放到emax64的bin目录下，该文件可以从正式发布的
   emacs的bin目录下获取，用emax64主要就是它编译时带了image-magic的支持，但是到27以后的版本，官方不再依赖image-magic，自
   带图片绽放功能（使用系统API）
*** TODO 长行性能<2019-02-25 周一 14:38>
*** TODO 正确搜索properties文件，不受多字节影响  <2020-02-24 周一 20:07>
** magit <2019-01-28 周一 10:15>
*** magit部分提交修改
用tab展开修改，假如有多个hunk，在要提交的hunk上stage（s键），如果失败可能是无法单独提交该hunk
*** magit pull or push 卡住，按$发现Store key in cache? (y/n) <2019-01-28 周一 10:16>
可以打开Putty工具，输入git@source.huawei.com 端口号2222 SSH协议，然后按yes cache the key
*** from mybase <2019-07-06 周六 15:48>
1.Reset head 选 origin/master可以撤消COMMIT恢复到unstage状态

2.How to Undo the Unpushed Commits in Magit?
Oct 15th, 2014 | Comments

In Magit buffer *magit: ..*,

Hit x
Select origin/master
Above action will undo all the commits that haven’t been pushed to github.com. It will still preserve the modified states of the yet-to-be staged/committed files.

3.git revert和git reset的区别
标签： gitstring
2012-06-14 20:56 55375人阅读 评论(4) 收藏 举报
 分类：  版本控制（44）  
原文：http://blog.csdn.net/koffuxu/article/details/6731876
git revert 是撤销某次操作，此次操作之前的commit都会被保留
git reset 是撤销某次提交，但是此次之后的修改都会被退回到暂存区
具体一个例子，假设有三个commit， git st:
commit3: add test3.c
commit2: add test2.c
commit1: add test1.c
当执行git revert HEAD~1时， commit2被撤销了
git log可以看到：
commit1：add test1.c
commit3：add test3.c
git status 没有任何变化
如果换做执行git reset --soft(默认) HEAD~1后，运行git log
commit2: add test2.c
commit1: add test1.c
运行git status， 则test3.c处于暂存区，准备提交。
如果换做执行git reset --hard HEAD~1后，
显示：HEAD is now at commit2，运行git log
commit2: add test2.c
commit1: add test1.c
运行git st， 没有任何变化
另外：
git revert <commit log string>是撤消该commit，作为一个新的commit。


magit 里执行magit-reset-soft输入HEAD~1，即撤消commit并恢复到stage状态


4.命令行clone指定分支
git clone -b <branch> remote url 


5 切换分支
b b     (magit-checkout)

6 stage多个可用鼠标划过

7. submodule如何下载
git submodule init
git submodule update

8.查看指定目录下的 status

git status [path]
比如当前目录下的 status:

git status .

9。有时PULL下来某个目录冲突解决不了，可以用以下命令
mergetool
然后选r表示remotea或者l表示local

10 同步forkfrom的新分支 ，用fetch all remotes，前提是添加了forkfrom路径，如果要同步远端的分支删除就勾上-p prune deleted branch
这样forkfrom中的分支就更新了，再用checkout new branch(b c)切换到新分支，push到origin即完成了同步

push的时候如果遇到 binary hook报错就上isource去工程设置里把Enable binary file gate去掉
*** submodule操作 <2020-03-08 周日 16:33>
Press o, then C-u u to update all submodules
命令行 git submodule foreach git pull
** markdown语法 <2019-01-31 周四 19:52>
插入代码 
``` python
code
```

*** 预览模式 markdown-live-preview-mode <2020-01-07 周二 12:00>
** 通过node npm命令安装bash-language-server报tree-sitter unable to verify the first certificate <2019-03-18 周一 16:09>
要增加以下环境变量
set NODE_TLS_REJECT_UNAUTHORIZED=0
** npm卸载命令 <2019-03-18 周一 16:40>
npm uninstall typescript -g
全删除
For Windows Users - If you want to remove all the node modules installed at once:

Open powershell
Go inside node_modules folder (cd node_modules)
Run this command - "npm uninstall (Get-ChildItem).Name"
** pdf-tools 研究

** MAC版本使用注意 <2019-01-25 Fri 13:56>
要安装 brew cask install emacs,先brew tap railwaycat/emacsmacport切换源，这个版本用的carbon库，tabbar的显示正常

修改~/.bash_profile并sourc~/.bash_profile这样终端输入emacs或者emacs -Q就能启动GUI版本,这段也要加到~/.bashrc中，这样emacs中的shell中的emacs命令也会关联到新版本
# 在终端下打开文件,替换命令行默认的emacs
alias emacs="${EMACS_HOME}/Emacs"
# GUI方式打开文件
alias e="${EMACS_HOME}/bin/emacsclient -n"

** ssh自动添加hostkey到know_hosts <2019-01-25 Fri 20:31>
当我们用ssh连接到其他linux平台时，会遇到以下提示：

The authenticity of host ‘git.sws.com (10.42.1.88)’ can’t be established. 
ECDSA key fingerprint is 53:b9:f9:30:67:ec:34:88:e8:bc:2a:a4:6f:3e:97:95. 
Are you sure you want to continue connecting (yes/no)? yes 
而此时必须输入yes，连接才能建立。

但其实我们可以在ssh_config配置文件中配置此项，

打开/etc/ssh/ssh_config文件：

找到： 
# StrictHostKeyChecking ask 
修改为 
StrictHostKeyChecking no

这个选项会自动的把 想要登录的机器的SSH pub key 添加到 /root/.ssh/know_hosts 中。

** 不好用的功能 <2019-01-25 Fri 22:20>

*** DONE helm-locate调用es命令无法搜到.class文件 <2020-02-04 周二 21:28>
CLOSED: [2020-02-05 周三 19:22]
helm-boring-file-regexp-list
*** DONE lsp-json不好用，打开json文件起了lsp还是无法使用lsp的功能 <2020-02-04 周二 23:09>
CLOSED: [2020-02-05 周三 16:18]
要安装这个版本才好用 npm i -g vscode-json-languageserver@1.2.1
这个ls开启后，新增的json文件需要重新加载后才能正常
*** TODO lsp-java跳转定义后的文件名全小写 <2020-02-05 周三 16:41>
** 安装brew install emacs-mac后的提示记录 <2019-01-27 Sun 23:16>
This is YAMAMOTO Mitsuharu's "Mac port" addition to
GNU Emacs 26. This provides a native GUI support for Mac OS X
10.6 - 10.14. After installing, see README-mac and NEWS-mac
in /usr/local/opt/emacs-mac for the port details.

Emacs.app was installed to:
  /usr/local/opt/emacs-mac

To link the application to default Homebrew App location:
  ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications
Other ways please refer:
  https://github.com/railwaycat/homebrew-emacsmacport/wiki/Alternative-way-of-place-Emacs.app-to-Applications-directory

For an Emacs.app CLI starter, see:
  https://gist.github.com/4043945

另外安装好后，在~/.bash_profile和~/.bashrc中添加以下语句，bash_profile是给终端用的，
要source一下并重启终端才生效，后面是emacs启动后shell使用的不用source
EMACS_HOME=/Applications/Emacs.app/Contents/MacOS
# 在终端下打开文件,替换命令行默认的emacs
alias emacs="${EMACS_HOME}/Emacs"

** mew config <2019-02-01 Fri 22:44>
pop方式
(setq mew-pop-user "zijianyue")  ;; (user-login-name)
(setq mew-pop-server "pop.163.com")    ;; if not localhost
(setq mew-pop-auth 'pass)              ;防止APOP password is not supported by this server
debug
(setq mew-debug t)
 '(mew-pop-delete nil)

** tabbar过滤buffer <2019-02-03 Sun 00:29>
#+BEGIN_SRC elisp 
 (defun tabbar-gzj-inhibit-function ()
   ""
   (member (buffer-name)
           (list "*helm gtags*" "")))
 (add-to-list 'tabbar-inhibit-functions 'tabbar-gzj-inhibit-function)

 (defun tabbar-line-fset ()
   "Return the header line templates that represent the tab bar.
 Inhibit display of the tab bar in current window if any of the
 `tabbar-inhibit-functions' return non-nil."
   (cond
    ((run-hook-with-args-until-success 'tabbar-inhibit-functions)
     ;; Don't show the tab bar.
     (setq header-line-format nil))
    ((tabbar-current-tabset t)
     ;; When available, use a cached tab bar value, else recompute it.
     (or (tabbar-template tabbar-current-tabset)
         (tabbar-line-format tabbar-current-tabset)))))

 (fset 'tabbar-line 'tabbar-line-fset)
#+END_SRC

** gtags 过滤 <2019-02-03 Sun 11:38>
~/.globalrc编写skip时不要写在最前，也不要写在最后

** c-x c-t上下两行互换 <2019-04-13 周六 15:39>

** GDB <2019-10-14 周一 16:27>
C++文件 用g++命令编译 g++ -g ab.cpp -o ab.exe  -g 是生成debug的符号表 -o可以省略
m-x gdb命令开始调试，gdb -i=mi ab.exe，然后在gdb命令里输入start开始调试 quit结束调试
运行exe shell中 ./ab.exe
常用GDB命令 n是下一步， l是列出当前代码上下文 , p 是打印指定变量, b 是指定断点 ，r 是run ，s是跳入函数 finish是跳出函数

** maven编译报各种目录无法删除是由于装了tabnine，它在后台索引造成的 <2020-01-20 周一 21:06>

** 高级调试方法：给指定函数加断点 <2020-03-06 周五 23:32>
(debug-on-entry 'set-mouse-position) 来设置当Emacs调用 set-mouse-position 函数的时候弹出堆栈，方便开发者定位Emacs运行时
的函数调用堆栈。
(cancel-debug-on-entry 'set-mouse-position) 取消运行时调试。

** 查看进程的命令 <2020-03-08 周日 14:56>
proced
list-processes
** ibuffer使用方法，包括创建分组 <2020-03-08 周日 15:53>
https://blog.csdn.net/wdkirchhoff/article/details/43193869
** CALC用法 <2020-11-28 周六 15:30>

d0 d6 d8 d2切换进制
'是输入算式，比如'后输入x^31-1
2^3=8是幂
7%3=4是取余
3/4=0.75
3\4=0整除
bl左移一位（想计算1左移10次就先输入1，然后c-u 10 bl）
br右移一位
ba 是AND 比如 输入 4
和 0，然后 ba结果是0
bo是 OR

输入16进制的数 16#1c

如果你想按照当前的进制输入数字，需要在键入数字前按‘#’，比如，在16进制模式下输入：
#10 <RET>
此时，calc中显示的数字就是16进制的10,而不是A。
输入一个数字（或矩阵），然后按<RET>，可以复制该数字（或矩阵）到整个运算堆栈的最顶部

(3) 温度单位转换
如果你想知道40 F°是多少C°，输入”40 回车 ut dF 回车 dC 回车”即可，这下就不会再为这些温度单位换算弄得晕头转向了吧！

数字分组 d g
6.7.2 Grouping Digits
Long numbers can be hard to read if they have too many digits. For example, the factorial of 30 is 33 digits long! Press d g (calc-group-digits) to enable Grouping mode, in which digits are displayed in clumps of 3 or 4 (depending on the current radix) separated by commas.

The d g command toggles grouping on and off. With a numeric prefix of 0, this command displays the current state of the grouping flag; with an argument of minus one it disables grouping; with a positive argument ‘N’ it enables grouping on every ‘N’ digits. For floating-point numbers, grouping normally occurs only before the decimal point. A negative prefix argument ‘-N’ enables grouping every ‘N’ digits both before and after the decimal point.

The d , (calc-group-char) command allows you to choose any character as the grouping separator. The default is the comma character. If you find it difficult to read vectors of large integers grouped with commas, you may wish to use spaces or some other character instead. This command takes the next character you type, whatever it is, and uses it as the digit separator. As a special case, d , \ selects ‘\,’ (TeX’s thin-space symbol) as the digit separator.

Please note that grouped numbers will not generally be parsed correctly if re-read in textual form, say by the use of C-x * y and C-x * g. (See Kill and Yank, for details on these commands.) One exception is the ‘\,’ separator, which doesn’t interfere with parsing because it is ignored by TeX language mode.

如何显示补码：
比如-3 16进制0xFFFFFFFD ，直接输入0xfffffffd 切换成10进制是4294967293
要想显示-3，先调整字长 b w，默认是32，0xfffffffd就用32就行；然后输入 16##fffffffd，再切换10进制

* python 
** 有用的网址
PEP 索引的网址是： http://python.org/dev/peps.
** pip带proxy
在CMD命令行输入：
set http_proxy=http://username:password@host:port
set https_proxy=http://username:password@host:port

export http_proxy=http://username:password@host:port
export https_proxy=http://username:password@host:port
bash里面set改成export
然后
pip install python-language-server[all]==0.20.0
[all]是把所有扩展也装上，==0.20.0是指定安装版本
** python windowserror 5
在用python删除文件的时候，一直报这个错误，查了 error5的错误是 拒绝访问。那么是删除权限不够？用管理员，一样的错误。后来才发现原来文件是只读属性。所以导致无法操作。

去掉只读属性就好。在rmtree操作前os.chmod( filename, stat.S_IWRITE )

import os
import stat
os.chmod( filename, stat.S_IWRITE )
附上 windows error错误代码：

0操作成功完成。
1功能错误。
2系统找不到指定的文件。
3系统找不到指定的路径。
4系统无法打开文件。
5拒绝访问。
6句柄无效。
7存储控制块被损坏。
8存储空间不足，无法处理此命令。
9存储控制块地址无效。
10环境错误。
11试图加载格式错误的程序。
12访问码无效。
13数据无效。
14存储器不足，无法完成此操作。
15系统找不到指定的驱动器。
16无法删除目录。
17系统无法将文件移到不同的驱动器。
18没有更多文件。
19介质受写入保护。
20系统找不到指定的设备。
21设备未就绪。
22设备不识别此命令。
23数据错误(循环冗余检查)。
24程序发出命令，但命令长度不正确。
25驱动器无法找出磁盘上特定区域或磁道的位置。
26无法访问指定的磁盘或软盘。
27驱动器找不到请求的扇区。
28打印机缺纸。
29系统无法写入指定的设备。
30系统无法从指定的设备上读取。
31连到系统上的设备没有发挥作用。
32进程无法访问文件，因为另一个程序正在使用此文件。
33进程无法访问文件，因为另一个程序已锁定文件的一部分。
36用来共享的打开文件过多。
38到达文件结尾。
39磁盘已满。
50不支持网络请求。
51远程计算机不可用。
52在网络上已有重复的名称。
53找不到网络路径。
54网络忙。
55指定的网络资源或设备不再可用。
56已到达网络BIOS命令限制。
57网络适配器硬件出错。
58指定的服务器无法运行请求的操作。
59发生意外的网络错误。
60远程适配器不兼容。
61打印机队列已满。
62无法在服务器上获得用于保存待打印文件的空间。
63删除等候打印的文件。
64指定的网络名不再可用。
65拒绝网络访问。
66网络资源类型错误。
67找不到网络名。
68超过本地计算机网卡的名称限制。
69超出网络BIOS会话限制。
70远程服务器已暂停，或正在启动过程中。
71当前已无法再同此远程计算机连接，因为已达到计算机的连接数目极限。
72已暂停指定的打印机或磁盘设备。
80文件存在。
82无法创建目录或文件。
83INT24失败。
84无法取得处理此请求的存储空间。
85本地设备名已在使用中。
86指定的网络密码错误。
87参数错误。
88网络上发生写入错误。
89系统无法在此时启动另一个进程。
100无法创建另一个系统信号灯。
101另一个进程拥有独占的信号灯。
102已设置信号灯且无法关闭。
103无法再设置信号灯。
104无法在中断时请求独占的信号灯。
105此信号灯的前一个所有权已结束。
107程序停止，因为替代的软盘未插入。
108磁盘在使用中，或被另一个进程锁定。
109管道已结束。
110系统无法打开指定的设备或文件。
111文件名太长。
112磁盘空间不足。
113无法再获得内部文件的标识。
114目标内部文件的标识不正确。
117应用程序制作的IOCTL调用错误。
118验证写入的切换参数值错误。
119系统不支持请求的命令。
120此功能只被此系统支持。
121信号灯超时时间已到。
122传递到系统调用的数据区太小。
123文件名、目录名或卷标语法不正确。
124系统调用级别错误。
125磁盘没有卷标。
126找不到指定的模块。
127找不到指定的程序。
128没有等候的子进程。
130试图使用操作(而非原始磁盘I/O)的已打开磁盘分区的文件句柄。
131试图移动文件指针到文件开头之前。
132无法在指定的设备或文件上设置文件指针。
133包含先前加入驱动器的驱动器无法使用JOIN或SUBST命令。
134试图在已被合并的驱动器上使用JOIN或SUBST命令。
135试图在已被合并的驱动器上使用JOIN或SUBST命令。
136系统试图解除未合并驱动器的JOIN。
137系统试图解除未替代驱动器的SUBST。
138系统试图将驱动器合并到合并驱动器上的目录。
139系统试图将驱动器替代为替代驱动器上的目录。
140系统试图将驱动器合并到替代驱动器上的目录。
141系统试图替代驱动器为合并驱动器上的目录。
142系统无法在此时运行JOIN或SUBST。
143系统无法将驱动器合并到或替代为相同驱动器上的目录。
144目录并非根目录下的子目录。
145目录非空。
146指定的路径已在替代中使用。
147资源不足，无法处理此命令。
148指定的路径无法在此时使用。
149企图将驱动器合并或替代为驱动器上目录是上一个替代的目标的驱动器。
150系统跟踪信息未在CONFIG.SYS文件中指定，或不允许跟踪。
151为DosMuxSemWait指定的信号灯事件个数错误。
152DosMuxSemWait不可运行。已设置过多的信号灯。
153DosMuxSemWait清单错误。
154输入的卷标超过目标文件系统的长度限制155无法创建另一个线程。
156接收进程已拒绝此信号。
157段已被放弃且无法锁定。
158段已解除锁定。
159线程标识的地址错误。
160传递到DosExecPgm的参数字符串错误。
161指定的路径无效。
162信号已暂停。
164无法在系统中创建更多的线程。
167无法锁定文件区域。
170请求的资源在使用中。
173对于提供取消区域进行锁定的请求不明显。
174文件系统不支持锁定类型的最小单元更改。
180系统检测出错误的段号。
183当文件已存在时，无法创建该文件。
186传递的标志错误。
187找不到指定的系统信号灯名称。
196操作系统无法运行此应用程序。
197操作系统当前的配置不能运行此应用程序。
199操作系统无法运行此应用程序。
200代码段不可大于或等于64K。
203操作系统找不到已输入的环境选项。
205命令子树中的进程没有信号处理程序。
206文件名或扩展名太长。
207第2环堆栈已被占用。
208没有正确输入文件名通配符*或?，或指定过多的文件名通配符。
209正在发送的信号错误。
210无法设置信号处理程序。
212段已锁定且无法重新分配。
214连到该程序或动态链接模块的动态链接模块太多。
215无法嵌套调用LoadModule。
230管道状态无效。
231所有的管道实例都在使用中。
232管道正在关闭中。
233管道的另一端上无任何进程。
234更多数据可用。
240取消会话。
254指定的扩展属性名无效。
255扩展属性不一致。
258等待的操作过时。
259没有可用的数据了。
266无法使用复制功能。
267目录名无效。
275扩展属性在缓冲区中不适用。
276装在文件系统上的扩展属性文件已损坏。
277扩展属性表格文件已满。
278指定的扩展属性句柄无效。
282装入的文件系统不支持扩展属性。
288企图释放并非呼叫方所拥有的多用户终端运行程序。
298发向信号灯的请求过多。
299仅完成部分的ReadProcessMemoty或WriteProcessMemory请求。
300操作锁定请求被拒绝。
301系统接收了一个无效的操作锁定确认。
487试图访问无效的地址。
534算术结果超过32位。
535管道的另一端有一进程。
536等候打开管道另一端的进程。
994拒绝访问扩展属性。
995由于线程退出或应用程序请求，已放弃I/O操作。
996重叠I/O事件不在信号状态中。
997重叠I/O操作在进行中。
998内存分配访问无效。
999错误运行页内操作。
* Intellij <2019-03-20 周三 16:10>
** 怎么避免  import java.utils.* <2019-03-20 周三 16:11>
Intellij Idea  工具在java文件中怎么避免  import java.utils.* 这样的导入方式,不推崇导入 *这样的做法

       settings 》Code Style 》Java   
       class count to use import with '*'      设置500
       Names count to use static import with '*'   设置500

      设置多少大家自己来设置
* 编译器学习

[[file:编译器部门要求/screenshot_2018-07-24_11-41-25.png]]
** 编译器处理流程
1.预处理(Prepreocess): import, macro, 预处理指令...
2.词法分析:(Lexical Analysis):将预处理过的代码文本转化成Toke流
3.语法分析:(Semantic Analysis):验证语法是否正确,生成语意节点,组合成抽象语法树.(AST)
4.静态分析:(static Analysis):类型检查,找出非语法错误.
5.代码生成:(CodeGen-IR):生成 LLVM-JR(汇编)
** llvm三阶段

[[file:编译器学习/screenshot_2018-09-07_16-51-04.png]]
** llvm IR三种格式
LLVM IR主要有三种格式：一种是在内存中的编译中间语言；一种是硬盘上存储的二进制中间语言（以.bc结尾），最后一种是可读的中间格式（以.ll结尾）。这三种中间格式是完全相等的。
** 流程（Pass）
* python 
** 有用的网址
PEP 索引的网址是： http://python.org/dev/peps.
** pip安装和升级
# install command line tools
$ xcode-select --install
 
# if pip not installed
$ sudo easy_install pip
 
# show current pip version
$ pip --version
 
# upgrade pip
$ sudo pip install --upgrade pip

* MAC使用
** 截屏
如果是截取全屏，用 shift+command+3 就可以快速截取整个屏幕，截图自动保存在桌面，文件名为截取时间，格式为png

如果是截取部分屏幕，用 shift+command+4 ，此时，鼠标显示会变成一个十字光标，此时可以任意选择自己想要截取的部分屏幕，之后松开鼠标，截图就成功了，截图自动保存在桌面，文件名为截取时间，格式为png
** 终端报错
-bash: /etc/profile: Permission denied in Terminal
解决办法
sudo chmod 755 /etc/profile
** Mac显示隐藏文件快捷键
96  Vergil_wj 
2017.05.17 09:07* 字数 111 阅读 7449评论 2喜欢 2
第一种:
在 macOS Sierra，我们可以使用快捷键 ⌘⇧.(Command + Shift + .) 来快速（在 Finder 中）显示和隐藏隐藏文件了。

第二种:
在终端使用:

//显示隐藏文件
defaults write com.apple.finder AppleShowAllFiles -bool true
//不显示隐藏文件
defaults write com.apple.finder AppleShowAllFiles -bool false

最后需要重启Finder:

重启Finder：窗口左上角的苹果标志-->强制退出-->Finder-->重新启动
* JAVA
** maven 的setting.xml
建立maven项目会需要去仓库下载一些相关的依赖包。maven默认的中央仓库是英国，所以我们把中央仓库改为maven阿里云中央仓库。

修改maven根目录下的conf文件夹中的setting.xml文件，内容如下：
  <localRepository>/Users/shangri-la/.m2/repository</localRepository>
 <mirrors>
    <mirror>
      <id>alimaven</id>
      <name>aliyun maven</name>
      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
      <mirrorOf>central</mirrorOf>        
    </mirror>
  </mirrors>
** spring <2019-09-11 周三 22:59>
***  <2019-09-11 周三 23:03>IOC方式：
对象的生命周期由Spring来管理，直接从Spring那里去获取一个对象。 IOC是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，交给了Spring。

在 Packge【pojo】下新建一个【Source】类：package pojo;
#+BEGIN_SRC java
public class Source {  
    private String fruit;   // 类型
    private String sugar;   // 糖分描述
    private String size;    // 大小杯    
    /* setter and getter */
}
#+END_SRC
在 【src】 目录下新建一个 【applicationContext.xml】 文件，通过 xml 文件配置的方式装配我们的 bean<?xml version="1.0" encoding="UTF-8"?>
#+BEGIN_SRC html
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean name="source" class="pojo.Source">
        <property name="fruit" value="橙子"/>
        <property name="sugar" value="多糖"/>
        <property name="size" value="超大杯"/>
    </bean>
</beans>
#+END_SRC
在 Packge【test】下新建一个【TestSpring】类：package test;
#+BEGIN_SRC java

import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import pojo.Source;

public class TestSpring {

    @Test
    public void test(){
        ApplicationContext context = new ClassPathXmlApplicationContext(
                new String[]{"applicationContext.xml"}
        );

        Source source = (Source) context.getBean("source");
        System.out.println(source.getFruit());
        System.out.println(source.getSugar());
        System.out.println(source.getSize());
    }
}
#+END_SRC
*** AOP <2019-09-11 周三 23:07>

Spring AOP 简介如果说 IoC 是 Spring 的核心，那么面向切面编程就是 Spring 最为重要的功能之一了，在数据库事务中切面编程被广泛使用。
AOP 即 Aspect Oriented Program 面向切面编程首先，在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。
所谓的核心业务，比如登陆，增加数据，删除数据都叫核心业务
所谓的周边功能，比如性能统计，日志，事务管理等等周边功能
在 Spring 的面向切面编程AOP思想里，即被定义为切面在面向切面编程AOP的思想里面，核心业务功能和切面功能分别独立进行开发，然后把切面功能和核心业务功能 "编织" 在一起，这就叫AOP

AOP 的目的AOP能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。

AOP 当中的概念：
切入点（Pointcut）在哪些类，哪些方法上切入（where）通知（Advice）在方法执行的什么时间（when:方法前/方法后/方法前后）做什么（what:增强的功能）
切面（Aspect）切面 = 切入点 + 通知，通俗点就是：在什么时机，什么地方，做什么增强！
织入（Weaving）把切面加入到对象，并创建出代理对象的过程。（由 Spring 来完成）
* LINUX命令
** 输出当前目录下各个子目录所使用的空间 <2019-10-13 周日 13:32>

命令：

du -h  --max-depth=1
* LEETCODE
** 动态规划背包 <2019-10-28 周一 16:57>
01背包的状态转换方程 f[i,j] = Max{ f[i-1,j-Wi]+Pi( j >= Wi ),  f[i-1,j] }
f[i,j]表示在前i件物品中选择若干件放在承重为 j 的背包中，可以取得的最大价值。
Pi表示第i件物品的价值。
Wi是第i件物品的重量
决策：为了背包中物品总价值最大化，第 i件物品应该放入背包中吗 ？

https://blog.csdn.net/mu399/article/details/7722810
* WIN10
** 截图快捷键 win键+shift+s <2020-03-08 周日 15:21>
** WMI Provider Host CPU 高解决办法 <2020-03-27 周五 13:13>
https://www.howtogeek.com/332838/what-is-the-wmi-provider-host-wmiprvse.exe-and-why-is-it-using-so-much-cpu/
先到事件查看器 Applications and Service Logs\Microsoft\Windows\WMI-Activity\Operational 位置查看日志
通过错误日志中的ClientProcessId 找到出导致WMI CPU高的进程PID，再到任务管理器中找出该进程
比如本机的进程相关的服务是Dell Data Vault Collector和  AWCCSERVICE这两个都停止并改为禁用，手动启动后解决
还有Alienware SupportAssist Remediation
** 五笔
输入法无法输入中文 <2020-05-19 周二 22:15>
先是卡住了，之后无法输入五笔中文，然后搜索到这个文章。

开了一堆窗口，不想重启，所以我是从控制面板，删除了五笔输入法，然后重新添加一次。这样就恢复了。

如果你是用拼音输入，方法也是一样的，就是先关闭你这个失灵的输入法，再删除，再添加。
https://www.zhihu.com/question/39056285
* 读书随笔
** 重新设计自己的人生 <2020-05-07 周四 15:12>
做一下MBTI职业性格测试，可以了解自己的优势（500强专用）
* CLION
** 看不到STL内容解决办法 <2021-03-11 周四 22:30>

#+DOWNLOADED: screenshot @ 2021-03-11 22:31:02
#+attr_org: :width 500px
[[file:org_download_images/CLION/2021-03-11_22-31-02_screenshot.png]]
